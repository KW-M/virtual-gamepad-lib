var p=Object.defineProperty;var f=(r,i,n)=>i in r?p(r,i,{enumerable:!0,configurable:!0,writable:!0,value:n}):r[i]=n;var l=(r,i,n)=>f(r,typeof i!="symbol"?i+"":i,n);import{a as m,c,b as u}from"./GamepadApiWrapper-Wfngy3DR.js";class v{constructor(i,n){l(this,"config");l(this,"apiWrapper");l(this,"btnChangeListener");l(this,"axisChangeListener");l(this,"DefaultJoystickDisplayFunction",(i,n,h)=>{const a=i.movementRange;if(i.joystickElement.style.transform=`translate(${n*a}px,${h*a}px)`,i.highlights&&this.config.moveDirectionHighlightClass){const s=i.highlights[c.up],t=i.highlights[c.down],e=i.highlights[c.left],o=i.highlights[c.right];s&&h<-.1?s.classList.add(this.config.moveDirectionHighlightClass||""):s&&s.classList.remove(this.config.moveDirectionHighlightClass||""),t&&h>.1?t.classList.add(this.config.moveDirectionHighlightClass||""):t&&t.classList.remove(this.config.moveDirectionHighlightClass||""),e&&n<-.1?e.classList.add(this.config.moveDirectionHighlightClass||""):e&&e.classList.remove(this.config.moveDirectionHighlightClass||""),o&&n>.1?o.classList.add(this.config.moveDirectionHighlightClass||""):o&&o.classList.remove(this.config.moveDirectionHighlightClass||"")}});l(this,"DefaultButtonDisplayFunction",(i,n,h,a,s,t)=>{const e=i.highlight;if(this.config.touchedHighlightClass&&e&&(s.touchDown?e.classList.add(this.config.touchedHighlightClass):s.touchUp&&e.classList.remove(this.config.touchedHighlightClass)),this.config.pressedHighlightClass&&e&&(s.pressed?e.classList.add(this.config.pressedHighlightClass):s.released&&e.classList.remove(this.config.pressedHighlightClass)),i.type==u.variable){const o=i.directionHighlight;if(this.config.moveDirectionHighlightClass&&o&&(s.pressed?o.classList.add(this.config.moveDirectionHighlightClass):s.released&&o.classList.remove(this.config.moveDirectionHighlightClass)),i.buttonElement){const g=i.direction==c.left||i.direction==c.right,d=i.direction==c.right||i.direction==c.down;i.buttonElement.style.transform=`translate${g?"X":"Y"}(${d?"":"-"}${n*i.movementRange}px)`}}});l(this,"displayButtonChanges",(i,n,h)=>{if(i!=this.config.gamepadIndex)return;const a=this.config.buttons;for(let s=0;s<a.length;s++){const t=a[s],e=h[s];if(!t||Object.keys(t).length==0||!e||Object.keys(e).length==0)continue;const o=n.buttons[s].value,g=n.buttons[s].touched,d=n.buttons[s].pressed;this.config.buttonDisplayFunction?this.config.buttonDisplayFunction(t,o,g,d,e,s):this.DefaultButtonDisplayFunction(t,o,g,d,e,s)}});this.config=i,this.apiWrapper=n||new m({buttonConfigs:[],updateDelay:0}),this.btnChangeListener=this.apiWrapper.onGamepadButtonChange(this.displayButtonChanges.bind(this)),this.axisChangeListener=this.apiWrapper.onGamepadAxisChange(this.displayJoystickChanges.bind(this))}displayJoystickChanges(i,n,h){if(i!=this.config.gamepadIndex)return;const a=this.config.sticks;for(let s=0;s<a.length;s++){const t=a[s];if(t!=null&&(t.xAxisIndex!==void 0&&h[t.xAxisIndex]||t.yAxisIndex!==void 0&&h[t.yAxisIndex])){const e=n.axes,o=t.xAxisIndex!==void 0&&e[t.xAxisIndex]||0,g=t.yAxisIndex!==void 0&&e[t.yAxisIndex]||0;this.config.joystickDisplayFunction?this.config.joystickDisplayFunction(t,o,g):this.DefaultJoystickDisplayFunction(t,o,g)}}}Cleanup(){this.apiWrapper.offGamepadButtonChange(this.btnChangeListener),this.apiWrapper.offGamepadAxisChange(this.axisChangeListener)}}export{v as G};
