var R=Object.defineProperty,j=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var B=Object.getOwnPropertySymbols;var J=Object.prototype.hasOwnProperty,_=Object.prototype.propertyIsEnumerable;var M=(d,e,t)=>e in d?R(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t,T=(d,e)=>{for(var t in e||(e={}))J.call(e,t)&&M(d,t,e[t]);if(B)for(var t of B(e))_.call(e,t)&&M(d,t,e[t]);return d},F=(d,e)=>j(d,N(e));var u=(d,e,t)=>(M(d,typeof e!="symbol"?e+"":e,t),t),O=(d,e,t)=>{if(!e.has(d))throw TypeError("Cannot "+t)};var E=(d,e,t)=>(O(d,e,"read from private field"),t?t.call(d):e.get(d)),x=(d,e,t)=>{if(e.has(d))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(d):e.set(d,t)},k=(d,e,t,n)=>(O(d,e,"write to private field"),n?n.call(d,t):e.set(d,t),t);var I=(d,e,t)=>(O(d,e,"access private method"),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(o){if(o.ep)return;o.ep=!0;const s=t(o);fetch(o.href,s)}})();var g=(d=>(d.up="up",d.down="down",d.left="left",d.right="right",d))(g||{}),C=(d=>(d.onOff="onOff",d.variable="variable",d))(C||{}),G=(d=>(d.real="real",d.emulated="emulated",d.overlay="overlay",d))(G||{});function $(d,e,t){const n=Math.sqrt(d*d+e*e);return n>t?{x:d/n,y:e/n}:{x:d/t,y:e/t}}function Y(d){document.querySelectorAll(d).forEach(t=>{if(t instanceof SVGGraphicsElement){t.getAttribute("transform")&&console.warn("Setting Transform origin on an element that already has a transform attribute. This may break the transform!",t);const n=t.getBBox();t.style.transformOrigin=`${n.x+n.width/2}px ${n.y+n.height/2}px`}else if(t instanceof HTMLElement){console.warn("Setting Transform origin on an element that is not an SVG element. This may break the transform!",t);const n=t.getBoundingClientRect();t.style.transformOrigin=`${n.width/2}px ${n.height/2}px`}})}const W=18,q=4,y=class{constructor(e){u(this,"getNativeGamepads",()=>[]);u(this,"buttonPressThreshold",.1);u(this,"realGamepadCount",0);u(this,"realGpadToPatchedIndexMap",[]);u(this,"patchedGpadToRealIndexMap",[]);u(this,"emulatedGamepads",[]);u(this,"emulatedGamepadsMetadata",[]);u(this,"undoEventPatch",()=>{});if(this.buttonPressThreshold=e||this.buttonPressThreshold,y.instanceRunning)throw new Error("Only one GamepadEmulator instance may exist at a time!");y.instanceRunning=!0,this.undoEventPatch=this.monkeyPatchGamepadEvents(),this.monkeyPatchGetGamepads()}AddEmulatedGamepad(e,t,n=W,o=q){if((e===-1||!e&&e!==0)&&(e=this.nextEmptyEGpadIndex(t)),this.emulatedGamepads[e])return!1;const s={emulation:G.emulated,connected:!0,timestamp:Math.floor(Date.now()/1e3),displayId:"Emulated Gamepad "+e,id:"Emulated Gamepad "+e+" (Xinput STANDARD GAMEPAD)",mapping:"standard",index:e,buttons:new Array(n).fill({pressed:!1,value:0,touched:!1},0,n),axes:new Array(o).fill(0,0,o),hapticActuators:[]};this.emulatedGamepads[e]=s,this.emulatedGamepadsMetadata[e]={overlayMode:t};const r=new Event("gamepadconnected");return r.gamepad=s,window.dispatchEvent(r),s}RemoveEmulatedGamepad(e){this.ClearDisplayButtonEventListeners(e),this.ClearDisplayJoystickEventListeners(e);var t=this.emulatedGamepads[e];if(t){delete this.emulatedGamepads[e],delete this.emulatedGamepadsMetadata[e];const n=F(T({},t),{connected:!1,timestamp:Math.floor(Date.now()/1e3)}),o=new Event("gamepaddisconnected");o.gamepad=n,window.dispatchEvent(o)}else console.warn("Error: removing emulated gamepad. No emulated gamepad exists at index "+e)}PressButton(e,t,n,o){if(this.emulatedGamepads[e]===void 0)throw new Error("Error: PressButton() - no emulated gamepad at index "+e+", pass a valid index, or call AddEmulatedGamepad() first to create an emulated gamepad at that index");var s=n>this.buttonPressThreshold;this.emulatedGamepads[e].buttons[t]={pressed:s,value:n||0,touched:s||o||!1}}MoveAxis(e,t,n){if(!this.emulatedGamepads[e])throw new Error("Error: MoveAxis() - no emulated gamepad at index "+e+", pass a valid index, or call AddEmulatedGamepad() first to create an emulated gamepad at that index");this.emulatedGamepads[e].axes[t]=n}AddDisplayButtonEventListeners(e,t){if(!this.emulatedGamepads[e])throw new Error("Error: AddDisplayJoystickEventListeners() - no emulated gamepad at index "+e+", pass a valid index, or call AddEmulatedGamepad() first to create an emulated gamepad at that index");let n=[];for(var o=0;o<t.length;o++){const s=t[o],r=s.buttonIndex,a=s.tapTarget;if(!a){console.warn("AddDisplayButtonEventListeners() - no tap target in button config "+r+", skipping...");continue}const i=h=>{h.changedTouches[0].target==a&&h.preventDefault()};window.addEventListener("touchstart",i,{passive:!1});const l=h=>{const m=h.buttons==1?1:0;(!s.lockTargetWhilePressed||m==0)&&this.PressButton(e,r,m,!0)};a.addEventListener("pointerenter",l);const p=h=>{const m=h.buttons==1?1:0;(!s.lockTargetWhilePressed||m==0)&&this.PressButton(e,r,0,!1)};a.addEventListener("pointerleave",p);const c=h=>{};if(a.addEventListener("pointercancel",c),s.type==C.onOff){const h=f=>{f.preventDefault(),this.PressButton(e,r,1,!0),s.lockTargetWhilePressed?a.setPointerCapture(f.pointerId):a.releasePointerCapture(f.pointerId),console.log("on/off pointer down",a.hasPointerCapture(f.pointerId))};a.addEventListener("pointerdown",h);const m=()=>{this.PressButton(e,r,0,!0)};a.addEventListener("pointerup",m),n.push(function(){window.removeEventListener("touchstart",i),a.removeEventListener("pointerenter",l),a.removeEventListener("pointerleave",p),a.removeEventListener("pointerdown",h),a.removeEventListener("pointerup",m),a.removeEventListener("pointercancel",c)})}else if(s.type==C.variable){const h=T({},s),m=this.AddDragControlListener(h,(f,P,w)=>{let v=f?this.buttonPressThreshold+1e-5:0;v+=s.directions[g.left]||s.directions[g.right]?Math.abs(P):0,v+=s.directions[g.up]||s.directions[g.down]?Math.abs(w):0,this.PressButton(e,s.buttonIndex,Math.min(v,1),f)});n.push(function(){window.removeEventListener("touchstart",i),a.removeEventListener("pointerenter",l),a.removeEventListener("pointerleave",p),a.removeEventListener("pointercancel",c),m()})}}this.emulatedGamepadsMetadata[e].removeButtonListenersFunc=()=>{n.forEach(s=>s())}}AddDisplayJoystickEventListeners(e,t){if(!this.emulatedGamepads[e])throw new Error("Error: AddDisplayJoystickEventListeners() - no emulated gamepad at index "+e+", pass a valid index, or call AddEmulatedGamepad() first to create an emulated gamepad at that index");let n=[];for(let o=0;o<t.length;o++){const s=t[o];if(s.tapTarget==null){console.warn(`AddDisplayJoystickEventListeners() - no tap target in joystick config ${o}, skipping...`);continue}const r=this.AddDragControlListener(s,(a,i,l)=>{s.xAxisIndex!==void 0&&this.MoveAxis(e,s.xAxisIndex,i),s.yAxisIndex!==void 0&&this.MoveAxis(e,s.yAxisIndex,l)});n.push(r)}this.emulatedGamepadsMetadata[e].removeJoystickListenersFunc=()=>{n.forEach(o=>o())}}ClearDisplayButtonEventListeners(e){var t;this.emulatedGamepadsMetadata[e]&&((t=this.emulatedGamepadsMetadata[e])==null?void 0:t.removeButtonListenersFunc)&&this.emulatedGamepadsMetadata[e].removeButtonListenersFunc()}ClearDisplayJoystickEventListeners(e){var t;this.emulatedGamepadsMetadata[e]&&((t=this.emulatedGamepadsMetadata[e])==null?void 0:t.removeJoystickListenersFunc)&&this.emulatedGamepadsMetadata[e].removeJoystickListenersFunc()}AddDragControlListener(e,t){let n={startX:0,startY:0},o=-1;const s=i=>{var l=i.pointerId;if(o===l){const p=e.directions[g.left]?-1:0,c=e.directions[g.right]?1:0,h=e.directions[g.up]?-1:0,m=e.directions[g.down]?1:0,f=i.clientX-n.startX,P=i.clientY-n.startY;let{x:w,y:v}=$(f,P,e.dragDistance);w=Math.max(Math.min(w,c),p),v=Math.max(Math.min(v,m),h),t(!0,w,v)}},r=i=>{o==i.pointerId&&(document.removeEventListener("pointermove",s,!1),document.removeEventListener("pointerup",r,!1),o=-1,t(!1,0,0))};e.tapTarget.addEventListener("pointerdown",i=>{i.preventDefault(),n.startX=i.clientX,n.startY=i.clientY,o=i.pointerId,e.lockTargetWhilePressed?e.tapTarget.setPointerCapture(i.pointerId):e.tapTarget.releasePointerCapture(i.pointerId),console.log("stick pointer down",e.tapTarget.hasPointerCapture(i.pointerId)),t(!0,0,0),document.addEventListener("pointermove",s,!1),document.addEventListener("pointerup",r,!1)});const a=i=>{i.changedTouches[0].target==e.tapTarget&&i.preventDefault()};return window.addEventListener("touchstart",a,{passive:!1}),function(){window.removeEventListener("touchstart",a),e.tapTarget.removeEventListener("pointerdown",s)}}cloneGamepad(e){if(!e)return e;const t=e.axes?e.axes.length:0,n=e.buttons?e.buttons.length:0,o={};for(let s in e)if(s==="axes"){const r=new Array(t);for(let a=0;a<t;a++)r[a]=Number(e.axes[a]);Object.defineProperty(o,"axes",{value:r,enumerable:!0})}else if(s==="buttons"){const r=new Array(n);for(let a=0;a<n;a++){const i=e.buttons[a];if(i==null)r[a]=i;else{const l=i.pressed,p=i.value,c=i.touched||!1;r[a]={pressed:l,value:p,touched:c}}}Object.defineProperty(o,"buttons",{value:r,enumerable:!0})}else Object.defineProperty(o,s,{get:()=>e[s],configurable:!0,enumerable:!0});return o.emulation||(o.emulation=G.real),o}nextEmptyEGpadIndex(e){let t=0;if(e)do{if(!this.emulatedGamepads[t])break;t++}while(t<this.emulatedGamepads.length);else{const n=Math.max(this.emulatedGamepads.length,this.patchedGpadToRealIndexMap.length);do{if(!this.emulatedGamepads[t]&&this.patchedGpadToRealIndexMap[t]==null)break;console.log("nextEmptyEGpadIndex",t,!this.emulatedGamepads[t],this.patchedGpadToRealIndexMap[t]==null),t++}while(t<n)}return t}nextEmptyRealGpadIndex(e){let t=e;const n=Math.max(this.emulatedGamepads.length,this.patchedGpadToRealIndexMap.length);do{const o=this.emulatedGamepadsMetadata[t],s=this.realGpadToPatchedIndexMap[t]==null&&this.patchedGpadToRealIndexMap[t]==null;if(!!o&&o.overlayMode||!o&&s)break;t++}while(t<n);return t}monkeyPatchGamepadEvents(){let e,t,n,o;window.hasOwnProperty("ongamepadconnected")&&(e=Object.getOwnPropertyDescriptor(window,"ongamepadconnected"),n=window.ongamepadconnected,window.ongamepadconnected=null,Object.defineProperty(window,"ongamepadconnected",{get:()=>function(a){},set:a=>{n=a},configurable:!0})),window.hasOwnProperty("ongamepaddisconnected")&&(t=Object.getOwnPropertyDescriptor(window,"ongamepaddisconnected"),o=window.ongamepaddisconnected,window.ongamepaddisconnected=null,Object.defineProperty(window,"ongamepaddisconnected",{get:()=>function(a){},set:a=>{n=a},configurable:!0}));const s=a=>{const i=a.gamepad;if(i&&i.emulation===void 0){a.stopImmediatePropagation();const l=this.cloneGamepad(a.gamepad),p=l.index,c=this.nextEmptyRealGpadIndex(p);this.realGpadToPatchedIndexMap[p]=c,this.patchedGpadToRealIndexMap[c]=p,Object.defineProperty(l,"index",{get:()=>c}),Object.defineProperty(l,"emulation",{get:()=>G.real}),this.realGamepadCount++,console.log(`real gamepad connected ${l.id} (${p}>${c})`,this.realGpadToPatchedIndexMap,this.emulatedGamepads,this.emulatedGamepadsMetadata);const h=new Event("gamepadconnected");h.gamepad=l,window.dispatchEvent(h),console.log("windowOngamepadconnected",n),n&&n.call(window,h)}};window.addEventListener("gamepadconnected",s);const r=a=>{const i=a.gamepad;if(i&&i.emulation===void 0){a.stopImmediatePropagation();const l=this.cloneGamepad(a.gamepad),p=this.realGpadToPatchedIndexMap[l.index]||l.index;Object.defineProperty(l,"index",{get:()=>p}),delete this.realGpadToPatchedIndexMap[l.index],delete this.patchedGpadToRealIndexMap[p],this.realGamepadCount--;const c=new Event("gamepaddisconnected");c.gamepad=l,window.dispatchEvent(c),o&&o.call(window,c)}};return window.addEventListener("gamepaddisconnected",r),function(){window.removeEventListener("gamepadconnected",s),window.hasOwnProperty("ongamepadconnected")&&(Object.defineProperty(window,"ongamepadconnected",e),window.ongamepadconnected=n),window.removeEventListener("gamepaddisconnected",r),window.hasOwnProperty("ongamepaddisconnected")&&(Object.defineProperty(window,"ongamepaddisconnected",t),window.ongamepaddisconnected=o)}}monkeyPatchGetGamepads(){const e=this;let t=navigator.getGamepads||navigator.webkitGetGamepads||navigator.mozGetGamepads||navigator.msGetGamepads;t&&(this.getNativeGamepads=t),navigator.getGamepads=function(){let n=[],o=t!=null?e.getNativeGamepads.apply(navigator):[];for(let r=0;r<o.length;r++){const a=o[r];if(!a)continue;let i=e.cloneGamepad(a),l=e.realGpadToPatchedIndexMap[i.index]||i.index;Object.defineProperty(i,"index",{get:()=>l}),n[l]=i}let s=e.emulatedGamepads;for(let r=0;r<s.length;r++){let a=n[r],i=s[r];if(i&&a){a.emulation=G.overlay;let l=Math.max(a.buttons.length,i.buttons.length);for(let c=0;c<l;c++){const h=i.buttons[c]||{touched:!1,pressed:!1,value:0},m=a.buttons[c]||{touched:!1,pressed:!1,value:0};n[r].buttons[c]={touched:h.touched||m.touched||!1,pressed:h.pressed||m.pressed||!1,value:Math.max(h.value,m.value)||0}}let p=Math.max(i.axes.length,a.axes.length);for(let c=0;c<p;c++){const h=i.axes[c]||0,m=a.axes[c]||0;n[r].axes[c]=Math.abs(h||0)>Math.abs(m||0)?h||0:m||0}}else i&&(i.emulation=G.emulated,i.timestamp=Math.floor(Date.now()/1e3),n[r]=e.cloneGamepad(i))}return n}}cleanup(){for(let e=0;e<this.emulatedGamepads.length;e++)this.ClearDisplayButtonEventListeners(e),this.ClearDisplayJoystickEventListeners(e);this.emulatedGamepads=[],this.undoEventPatch(),navigator.getGamepads=this.getNativeGamepads,y.instanceRunning=!1}};let H=y;u(H,"instanceRunning",!1);class X{constructor(e){u(this,"updateDelay");u(this,"axisDeadZone");u(this,"buttonConfigs");u(this,"lastStateOfGamepads");u(this,"changeMaskOfGamepads");u(this,"gamepadConnectListeners");u(this,"gamepadDisconnectListeners");u(this,"gamepadButtonChangeListeners");u(this,"gamepadAxisChangeListeners");this.updateDelay=e.updateDelay||0,this.axisDeadZone=e.axisDeadZone||0,this.buttonConfigs=e.buttonConfigs||[],this.lastStateOfGamepads=[],this.changeMaskOfGamepads=[],this.gamepadConnectListeners=[],this.gamepadDisconnectListeners=[],this.gamepadButtonChangeListeners=[],this.gamepadAxisChangeListeners=[],navigator.gamepadInputEmulation="gamepad",window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,navigator.getGamepads=navigator.getGamepads||navigator.webkitGetGamepads||navigator.mozGetGamepads||navigator.msGetGamepads,this.gamepadApiSupported()&&this.tickLoop()}set buttonsConfig(e){this.buttonConfigs=e}onGamepadConnect(e){this.gamepadConnectListeners.push(e),window.addEventListener("gamepadconnected",e,!0)}offGamepadConnect(e){this.gamepadConnectListeners=this.gamepadConnectListeners.filter(t=>t!==e),window.removeEventListener("gamepadconnected",e,!0)}onGamepadDisconnect(e){this.gamepadDisconnectListeners.push(e),window.addEventListener("gamepaddisconnected",e,!0)}offGamepadDisconnect(e){this.gamepadDisconnectListeners=this.gamepadDisconnectListeners.filter(t=>t!==e),window.removeEventListener("gamepaddisconnected",e,!0)}onGamepadAxisChange(e){return this.gamepadAxisChangeListeners.push(e),e}offGamepadAxisChange(e){this.gamepadAxisChangeListeners=this.gamepadAxisChangeListeners.filter(t=>t!==e)}onGamepadButtonChange(e){return this.gamepadButtonChangeListeners.push(e),e}offGamepadButtonChange(e){this.gamepadButtonChangeListeners=this.gamepadButtonChangeListeners.filter(t=>t!==e)}gamepadApiSupported(){return!!navigator.getGamepads&&!!navigator.getGamepads()}tickLoop(){this.checkForGamepadChanges(),this.updateDelay==0?requestAnimationFrame(this.tickLoop.bind(this)):setTimeout(()=>{requestAnimationFrame(this.tickLoop.bind(this))},this.updateDelay)}checkForGamepadChanges(){let e=navigator.getGamepads();for(var t=0;t<e.length;t++){let n=e[t];!n||(this.lastStateOfGamepads[t]||(this.lastStateOfGamepads[t]=n),this.checkForAxisChanges(t,n),this.checkForButtonChanges(t,n),this.lastStateOfGamepads[t]=n)}}checkForAxisChanges(e,t){let n=t.axes;if(n.length==0)return;let s=this.lastStateOfGamepads[e].axes||[],r=[],a,i=!1;for(a=0;a<n.length;a++){let l=n[a]||0,p=s[a]||0;if(l!=p){if(Math.abs(l)<this.axisDeadZone&&Math.abs(p)<this.axisDeadZone)continue;r[a]=!0,i=!0}else r[a]=!1}i&&this.gamepadAxisChangeListeners.forEach(l=>l(e,t,r))}checkForButtonChanges(e,t){let n=t.buttons;if(n.length==0)return;const s=this.lastStateOfGamepads[e].buttons||n;let r=[],a,i=!1;for(a=0;a<n.length;a++){let l=!1;const p=n[a]||{pressed:!1,value:0,touched:!1},c=s[a]||{pressed:!1,value:0,touched:!1},h=this.buttonConfigs[a]||{},m={};p.touched&&!c.touched?(m.touchDown=!0,l=!0):!p.touched&&c.touched&&(m.touchUp=!0,l=!0),p.pressed&&!c.pressed?(m.pressed=!0,l=!0):!p.pressed&&c.pressed&&(m.released=!0,l=!0),h.fireWhileHolding&&p.pressed&&c.pressed&&(m.heldDown=!0,l=!0),p.value!=c.value&&(m.valueChanged=!0,l=!0),l?(i=!0,r[a]=m):r[a]=!1}i&&this.gamepadButtonChangeListeners.forEach(l=>l(e,t,r))}}var L,b,D,A,S;class Z{constructor(e,t){x(this,A);u(this,"config");u(this,"apiWrapper");x(this,L,void 0);x(this,b,void 0);u(this,"defaultJoystickDisplayFunction",(e,t,n)=>{const o=e.movementRange;if(e.joystickElement.style.transform=`translate(${t*o}px,${n*o}px)`,e.highlights&&this.config.moveDirectionHighlightClass){const s=e.highlights[g.up],r=e.highlights[g.down],a=e.highlights[g.left],i=e.highlights[g.right];s&&n<-.1?s.classList.add(this.config.moveDirectionHighlightClass||""):s&&s.classList.remove(this.config.moveDirectionHighlightClass||""),r&&n>.1?r.classList.add(this.config.moveDirectionHighlightClass||""):r&&r.classList.remove(this.config.moveDirectionHighlightClass||""),a&&t<-.1?a.classList.add(this.config.moveDirectionHighlightClass||""):a&&a.classList.remove(this.config.moveDirectionHighlightClass||""),i&&t>.1?i.classList.add(this.config.moveDirectionHighlightClass||""):i&&i.classList.remove(this.config.moveDirectionHighlightClass||"")}});u(this,"defaultButtonDisplayFunction",(e,t,n,o,s,r)=>{const a=e.highlight;if(this.config.touchedHighlightClass&&a&&(s.touchDown?a.classList.add(this.config.touchedHighlightClass):s.touchUp&&a.classList.remove(this.config.touchedHighlightClass)),this.config.pressedHighlightClass&&a&&(s.pressed?a.classList.add(this.config.pressedHighlightClass):s.released&&a.classList.remove(this.config.pressedHighlightClass)),e.type==C.variable){const i=e.directionHighlight;if(this.config.moveDirectionHighlightClass&&i&&(s.pressed?i.classList.add(this.config.moveDirectionHighlightClass):s.released&&i.classList.remove(this.config.moveDirectionHighlightClass)),e.buttonElement){const l=e.direction==g.left||e.direction==g.right,p=e.direction==g.right||e.direction==g.down;e.buttonElement.style.transform=`translate${l?"X":"Y"}(${p?"":"-"}${t*e.movementRange}px)`}}});x(this,D,(e,t,n)=>{if(e!=this.config.gamepadIndex)return;const o=this.config.buttons;for(let s=0;s<o.length;s++){const r=n[s];if(!r||Object.keys(r).length==0)continue;const a=o[s],i=t.buttons[s].value,l=t.buttons[s].touched,p=t.buttons[s].pressed;this.config.buttonDisplayFunction?this.config.buttonDisplayFunction(a,i,l,p,r,s):this.defaultButtonDisplayFunction(a,i,l,p,r,s)}});this.config=e,this.apiWrapper=t||new X({buttonConfigs:[],updateDelay:0}),k(this,L,this.apiWrapper.onGamepadButtonChange(E(this,D).bind(this))),k(this,b,this.apiWrapper.onGamepadAxisChange(I(this,A,S).bind(this)))}cleanup(){this.apiWrapper.offGamepadButtonChange(E(this,L)),this.apiWrapper.offGamepadAxisChange(E(this,b))}}L=new WeakMap,b=new WeakMap,D=new WeakMap,A=new WeakSet,S=function(e,t,n){if(e!=this.config.gamepadIndex)return;const o=this.config.sticks;for(let s=0;s<o.length;s++){const r=o[s];if(r.xAxisIndex!==void 0&&n[r.xAxisIndex]||r.yAxisIndex!==void 0&&n[r.yAxisIndex]){const a=t.axes,i=r.xAxisIndex!==void 0&&a[r.xAxisIndex]||0,l=r.yAxisIndex!==void 0&&a[r.yAxisIndex]||0;this.config.joystickDisplayFunction?this.config.joystickDisplayFunction(r,i,l):this.defaultJoystickDisplayFunction(r,i,l)}}};export{W as D,H as G,X as a,C as b,g as c,Y as d,Z as e,q as f,G as g};
