var p=Object.defineProperty;var f=(r,i,e)=>i in r?p(r,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[i]=e;var l=(r,i,e)=>(f(r,typeof i!="symbol"?i+"":i,e),e);import{a as m,c,b as u}from"./GamepadApiWrapper.a86d8aef.js";class v{constructor(i,e){l(this,"config");l(this,"apiWrapper");l(this,"btnChangeListener");l(this,"axisChangeListener");l(this,"DefaultJoystickDisplayFunction",(i,e,o)=>{const a=i.movementRange;if(i.joystickElement.style.transform=`translate(${e*a}px,${o*a}px)`,i.highlights&&this.config.moveDirectionHighlightClass){const s=i.highlights[c.up],t=i.highlights[c.down],n=i.highlights[c.left],h=i.highlights[c.right];s&&o<-.1?s.classList.add(this.config.moveDirectionHighlightClass||""):s&&s.classList.remove(this.config.moveDirectionHighlightClass||""),t&&o>.1?t.classList.add(this.config.moveDirectionHighlightClass||""):t&&t.classList.remove(this.config.moveDirectionHighlightClass||""),n&&e<-.1?n.classList.add(this.config.moveDirectionHighlightClass||""):n&&n.classList.remove(this.config.moveDirectionHighlightClass||""),h&&e>.1?h.classList.add(this.config.moveDirectionHighlightClass||""):h&&h.classList.remove(this.config.moveDirectionHighlightClass||"")}});l(this,"DefaultButtonDisplayFunction",(i,e,o,a,s,t)=>{const n=i.highlight;if(this.config.touchedHighlightClass&&n&&(s.touchDown?n.classList.add(this.config.touchedHighlightClass):s.touchUp&&n.classList.remove(this.config.touchedHighlightClass)),this.config.pressedHighlightClass&&n&&(s.pressed?n.classList.add(this.config.pressedHighlightClass):s.released&&n.classList.remove(this.config.pressedHighlightClass)),i.type==u.variable){const h=i.directionHighlight;if(this.config.moveDirectionHighlightClass&&h&&(s.pressed?h.classList.add(this.config.moveDirectionHighlightClass):s.released&&h.classList.remove(this.config.moveDirectionHighlightClass)),i.buttonElement){const g=i.direction==c.left||i.direction==c.right,d=i.direction==c.right||i.direction==c.down;i.buttonElement.style.transform=`translate${g?"X":"Y"}(${d?"":"-"}${e*i.movementRange}px)`}}});l(this,"displayButtonChanges",(i,e,o)=>{if(i!=this.config.gamepadIndex)return;const a=this.config.buttons;for(let s=0;s<a.length;s++){const t=o[s];if(!t||Object.keys(t).length==0)continue;const n=a[s],h=e.buttons[s].value,g=e.buttons[s].touched,d=e.buttons[s].pressed;this.config.buttonDisplayFunction?this.config.buttonDisplayFunction(n,h,g,d,t,s):this.DefaultButtonDisplayFunction(n,h,g,d,t,s)}});this.config=i,this.apiWrapper=e||new m({buttonConfigs:[],updateDelay:0}),this.btnChangeListener=this.apiWrapper.onGamepadButtonChange(this.displayButtonChanges.bind(this)),this.axisChangeListener=this.apiWrapper.onGamepadAxisChange(this.displayJoystickChanges.bind(this))}displayJoystickChanges(i,e,o){if(i!=this.config.gamepadIndex)return;const a=this.config.sticks;for(let s=0;s<a.length;s++){const t=a[s];if(t.xAxisIndex!==void 0&&o[t.xAxisIndex]||t.yAxisIndex!==void 0&&o[t.yAxisIndex]){const n=e.axes,h=t.xAxisIndex!==void 0&&n[t.xAxisIndex]||0,g=t.yAxisIndex!==void 0&&n[t.yAxisIndex]||0;this.config.joystickDisplayFunction?this.config.joystickDisplayFunction(t,h,g):this.DefaultJoystickDisplayFunction(t,h,g)}}}Cleanup(){this.apiWrapper.offGamepadButtonChange(this.btnChangeListener),this.apiWrapper.offGamepadAxisChange(this.axisChangeListener)}}export{v as G};
